#:import fch kivy.uix.filechooser
#<-HexCellWidget>:
#    id: hexcell
#    canvas:
#        PushMatrix:
#        Color:
#            rgba: 0, 0, 0, 1
#        Translate:
#            xy: self.pos
#        Line:
#            points: self.points_vertices
#            width: 1.5
#        Color:
#            rgba: 0, 0, 0, 0.5*self.is_selected
#        Mesh:
#            vertices: self.mesh_vertices
#            mode: 'triangle_fan'
#            indices: range(6)
#        PopMatrix:

<HexCellWidget>:
    id: cell
    canvas:
        PushMatrix
        Translate:
            xy: self.pos
        Color:
            rgba: 0, 0, 0, 0.5*self.is_highlighted
        Mesh:
            vertices: self.mesh_vertices
            mode: 'triangle_fan'
            indices: range(6)
        Color:
            rgba: ((1.0, 0, 0, 1.0) if self.is_selected else (0, 0, 0, 1.0))
        Line:
            points: self.circuit
            width: 1.5
        PopMatrix



<-Hexgrid>:
    id: grid
    size_hint: (None, None)
#    size: background.size
#    FullImage:
#        id: background
#        scale: grid.scale
#        pos: (grid.x - self.width/2, grid.y)
#        pos: grid.pos
#        source: "./data/fonchik_pustynka1.png"

<CompositeArena@RelativeLayout>:
    id: arena
    scale: 1.0
    size_hint: (None, None)
    size: background.size
    FullImage:
        id: background
        scale: arena.scale
#        pos: (grid.x - self.width/2, grid.y)
#        pos: grid.pos
        source: "./data/fonchik_pustynka1.png"
#    Hexgrid:
#        id: grid
#        scale:


<FullImage@Image>:
    id: img
    scale: 1.0
    allow_stretch: True
    size: self.texture.size if self.texture else (0, 0)
    size_hint: (None, None)
    on_scale: self.width = self.texture.width * self.scale; self.height = self.texture.height * self.scale
    canvas:
        Color:
            rgb: (1, 1, 1)
        Rectangle:
            pos: self.pos
            texture: self.texture
            size: self.size